#include <iostream>
#include <string>
using namespace std;

// Estructura del nodo
struct Nodo {
    int id;
    string nombre;
    int prioridad;
    Nodo* siguiente;

    Nodo(int i, string n, int p) {
    id = i;
    nombre = n;
    prioridad = p;
    siguiente = NULL;
}

};

// Lista enlazada (gestión de procesos)
class ListaProcesos {
private:
    Nodo* cabeza;
    int contadorId;

public:
    ListaProcesos() : cabeza(NULL), contadorId(1) {}

    void insertar(string nombre, int prioridad) {
        Nodo* nuevo = new Nodo(contadorId++, nombre, prioridad);

        if (!cabeza || prioridad > cabeza->prioridad) {
            nuevo->siguiente = cabeza;
            cabeza = nuevo;
        } else {
            Nodo* actual = cabeza;
            while (actual->siguiente && prioridad <= actual->siguiente->prioridad) {
                actual = actual->siguiente;
            }
            nuevo->siguiente = actual->siguiente;
            actual->siguiente = nuevo;
        }
    }

    bool eliminar(int id) {
        if (!cabeza) return false;

        if (cabeza->id == id) {
            Nodo* temp = cabeza;
            cabeza = cabeza->siguiente;
            delete temp;
            return true;
        }

        Nodo* actual = cabeza;
        while (actual->siguiente && actual->siguiente->id != id) {
            actual = actual->siguiente;
        }

        if (actual->siguiente) {
            Nodo* temp = actual->siguiente;
            actual->siguiente = temp->siguiente;
            delete temp;
            return true;
        }

        return false;
    }

    Nodo* buscarPorId(int id) {
        Nodo* actual = cabeza;
        while (actual) {
            if (actual->id == id)
                return actual;
            actual = actual->siguiente;
        }
        return NULL;
    }

    void mostrar() {
        Nodo* actual = cabeza;
        cout << "\n=== LISTA DE PROCESOS ===\n";
        cout << "ID\tNombre\tPrioridad\n";
        while (actual) {
            cout << actual->id << "\t" << actual->nombre << "\t" << actual->prioridad << endl;
            actual = actual->siguiente;
        }
    }
};

// Cola FIFO (CPU)
class ColaCPU {
private:
    Nodo* frente;
    Nodo* fin;

public:
    ColaCPU() : frente(NULL), fin(NULL) {}

    void encolar(Nodo* proc) {
        if (!proc) return;
        Nodo* nuevo = new Nodo(proc->id, proc->nombre, proc->prioridad);

        if (!frente) {
            frente = fin = nuevo;
        } else {
            fin->siguiente = nuevo;
            fin = nuevo;
        }
    }

    Nodo* desencolar() {
        if (!frente) return NULL;

        Nodo* temp = frente;
        frente = frente->siguiente;
        if (!frente) fin = NULL;

        temp->siguiente = NULL;
        return temp;
    }

    void mostrar() {
        Nodo* actual = frente;
        cout << "\n=== COLA DE CPU ===\n";
        cout << "ID\tNombre\tPrioridad\n";
        while (actual) {
            cout << actual->id << "\t" << actual->nombre << "\t" << actual->prioridad << endl;
            actual = actual->siguiente;
        }
    }
};

// Pila (Memoria)
class PilaMemoria {
private:
    Nodo* cima;

public:
    PilaMemoria() : cima(NULL) {}

    void push(Nodo* proc) {
        if (!proc) return;
        Nodo* nuevo = new Nodo(proc->id, proc->nombre, proc->prioridad);
        nuevo->siguiente = cima;
        cima = nuevo;
    }

    Nodo* pop() {
        if (!cima) return NULL;
        Nodo* temp = cima;
        cima = cima->siguiente;
        temp->siguiente = NULL;
        return temp;
    }

    void mostrar() {
        Nodo* actual = cima;
        cout << "\n=== PILA DE MEMORIA ===\n";
        cout << "ID\tNombre\tPrioridad\n";
        while (actual) {
            cout << actual->id << "\t" << actual->nombre << "\t" << actual->prioridad << endl;
            actual = actual->siguiente;
        }
    }
};

// Menú
void mostrarMenu() {
    cout << "\n=== MENU DE GESTION DE PROCESOS ===\n";
    cout << "1. Agregar proceso a lista\n";
    cout << "2. Mostrar lista de procesos\n";
    cout << "3. Encolar proceso a CPU\n";
    cout << "4. Mostrar cola de CPU\n";
    cout << "5. Ejecutar proceso (desencolar CPU)\n";
    cout << "6. Asignar memoria (push)\n";
    cout << "7. Liberar memoria (pop)\n";
    cout << "8. Mostrar memoria (pila)\n";
    cout << "9. Eliminar proceso de la lista\n";
    cout << "10. Salir\n";
    cout << "Seleccione una opcion: ";
}

// Programa principal
int main() {
    ListaProcesos lista;
    ColaCPU cola;
    PilaMemoria pila;

    int opcion, prioridad, id;
    string nombre;

    do {
        mostrarMenu();
        cin >> opcion;

        switch(opcion) {
            case 1:
                cout << "Nombre del proceso: ";
                cin.ignore();
                getline(cin, nombre);
                cout << "Prioridad (1-10): ";
                cin >> prioridad;
                lista.insertar(nombre, prioridad);
                break;

            case 2:
                lista.mostrar();
                break;

            case 3:
                lista.mostrar();
                cout << "ID del proceso a encolar: ";
                cin >> id;
                {
                    Nodo* encontrado = lista.buscarPorId(id);
                    if (encontrado) {
                        cola.encolar(encontrado);
                        cout << "Proceso encolado a CPU.\n";
                    } else {
                        cout << "Proceso no encontrado.\n";
                    }
                }
                break;

            case 4:
                cola.mostrar();
                break;

            case 5: {
                Nodo* ejecutado = cola.desencolar();
                if (ejecutado) {
                    cout << "Proceso ejecutado: " << ejecutado->nombre << " (ID: " << ejecutado->id << ")\n";
                    delete ejecutado;
                } else {
                    cout << "No hay procesos en la CPU.\n";
                }
                break;
            }

            case 6:
                lista.mostrar();
                cout << "ID del proceso a asignar en memoria: ";
                cin >> id;
                {
                    Nodo* encontrado = lista.buscarPorId(id);
                    if (encontrado) {
                        pila.push(encontrado);
                        cout << "Proceso asignado en memoria.\n";
                    } else {
                        cout << "Proceso no encontrado.\n";
                    }
                }
                break;

            case 7: {
                Nodo* liberado = pila.pop();
                if (liberado) {
                    cout << "Memoria liberada del proceso: " << liberado->nombre << " (ID: " << liberado->id << ")\n";
                    delete liberado;
                } else {
                    cout << "No hay procesos en memoria.\n";
                }
                break;
            }

            case 8:
                pila.mostrar();
                break;

            case 9:
                lista.mostrar();
                cout << "ID del proceso a eliminar: ";
                cin >> id;
                if (lista.eliminar(id)) {
                    cout << "Proceso eliminado de la lista.\n";
                } else {
                    cout << "Proceso no encontrado.\n";
                }
                break;

            case 10:
                cout << "Saliendo...\n";
                break;

            default:
                cout << "Opcion no valida.\n";
        }

    } while (opcion != 10);

    return 0;
}
